#pragma one

#ifndef NESORAIO_H
#define NESORAIO_H

#include <fstream>
#include <cmath>
#include <vector>
#include <string>

#include "Nesoraint.h"


namespace nesora{

    struct WaveFileMetaData {
		std::string	INAM = "Nesora Voice";	//タイトル
		std::string	IPRD = "Nesora";	//アルバム名
		std::string IART = "MucchoSP";	//アーティスト名
		std::string	ICMT = "This is an audio file generated by Nesora.";	//コメント
		std::string	ICRD = "After 2024";	//作成日
		std::string	IGNR = "Voice";	//ジャンル
		std::string	ITRK = "0";	//トラック
		std::string	ICMS = "None";	//依頼者
		std::string	ICOP = "Copyright (c) MucchoSP";	//著作権情報
		std::string ISFT = "Nesora Mikomi";	//ファイル作成に使用したソフトウエア名
    };

    class NesoraWaveFile{
    private:
        std::vector<nsfloat> buffer;
        nsuint samplingFrequency = 48000;
		uint16_t channelNum = 1;		    //チャンネル数
		uint16_t bitPerSample = 16;		    //量子化ビット数

        WaveFileMetaData metaData;

    public:
        NesoraWaveFile();
        NesoraWaveFile(const std::vector<nsfloat>&);

        int save(std::string);

        void SetMetaData(const WaveFileMetaData&);
        WaveFileMetaData GetMetaData();
        const WaveFileMetaData& GetMetaData() const;

        void SetWave(const std::vector<nsfloat> &);
        std::vector<nsfloat> GetWave();

        void SetSamplingFrequency(const nsuint& smpl);
        nsuint GetSamplingFrequency();
    };

}//namespace nesora



#endif